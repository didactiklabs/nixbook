--- a/src/main.rs
+++ b/src/main.rs
@@ -24,6 +24,10 @@ struct Cli {

     #[arg(long)]
     zsh: bool,
+
+    /// Generate fish shell initialization script
+    #[arg(long)]
+    fish: bool,
 }

 fn main() {
@@ -82,6 +86,18 @@ fn main() {
         }
     };
     }
+    if cli.fish {
+        match leadr::init_fish(&config) {
+            Ok(script) => {
+                print!("{}", script);
+                return;
+            }
+            Err(e) => {
+                eprintln!("Error generating fish script: {:?}", e);
+                std::process::exit(1);
+            }
+        };
+    }

     let session_result = LeadrSession::new(&config, mappings).run();
     match session_result {
--- a/src/shell.rs
+++ b/src/shell.rs
@@ -3,6 +3,7 @@ use crate::{config::Config, error::LeadrError, keymap::parse_keybinding};

 const BASH_INIT_TEMPLATE: &str = include_str!("../shell/init.bash");
 const ZSH_INIT_TEMPLATE: &str = include_str!("../shell/init.zsh");
+const FISH_INIT_TEMPLATE: &str = include_str!("../shell/init.fish");

 pub fn init_bash(config: &Config) -> Result<String, LeadrError> {
     let bind_key = parse_keybinding(&config.leadr_key)?;
@@ -15,6 +16,13 @@ pub fn init_zsh(config: &Config) -> Result<String, LeadrError> {
     Ok(ZSH_INIT_TEMPLATE.replace("{{bind_key}}", &leader_key))
 }

+/// Generates a fish script that handles the resulting command and binds it to the leadr key.
+pub fn init_fish(config: &Config) -> Result<String, LeadrError> {
+    let leader_key = parse_keybinding(&config.leadr_key)?;
+
+    Ok(FISH_INIT_TEMPLATE.replace("{{bind_key}}", &leader_key))
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -15,6 +15,7 @@ pub use mappings::{InsertType, Mapping, Mappings};
 pub use session::{LeadrSession, SessionResult};
 pub use shell::init_bash;
 pub use shell::init_zsh;
+pub use shell::init_fish;
 pub use ui::{panel::Panel, theme::Theme};

 fn get_config_dir() -> Result<PathBuf, LeadrError> {